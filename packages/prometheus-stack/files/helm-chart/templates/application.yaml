---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  labels:
    app.kubernetes.io/name: {{ .Chart.Name }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/part-of: {{ .Values.organization }}.{{ .Values.project }}
    app.kubernetes.io/managed-by: kubepak
  name: {{ .Release.Name }}
  namespace: {{ index .Values "packages" "argo-cd" "namespace" }}
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  project: {{ .Values.environment }}-{{ .Values.organization }}-{{ .Values.project }}
  source:
    repoURL: https://prometheus-community.github.io/helm-charts
    targetRevision: {{ index .Values "packages" "prometheus-stack" "chartVersion" }}
    chart: kube-prometheus-stack
    helm:
      parameters:
        - name: fullnameOverride
          value: "{{ .Release.Name }}"
        - name: crds.enabled
          value: "false"
        - name: prometheusOperator.tls.enabled
          value: "false"
        - name: grafana.enabled
          value: "{{ index .Values "packages" "prometheus-stack" "grafana" "enabled" }}"
        - name: grafana.defaultDashboardsEditable
          value: "false"
        - name: grafana.adminPassword
          value: "admin"
        - name: grafana.assertNoLeakedSecrets
          value: "false"
        - name: grafana.sidecar.dashboards.annotations.grafana_folder
          value: "default"
        - name: grafana.sidecar.dashboards.defaultFolderName
          value: "default"
        - name: grafana.sidecar.dashboards.folderAnnotation
          value: "grafana_folder"
        - name: grafana.sidecar.dashboards.labelValue
          value: "grafana"
        - name: grafana.sidecar.dashboards.provider.foldersFromFilesStructure
          value: "true"
      values: |
        global:
          {{- include "common.registryCredentials.imagePullSecrets" (merge (dict "hasNameField" true) .) | nindent 10 }}
        grafana:
          "grafana.ini":
            server:
              root_url: {{ include "prometheus-stack.grafana.web.externalUrl" . }}
            {{- if index .Values "packages" "prometheus-stack" "grafana" "auth" "oidc" "enabled" }}
            auth.basic:
              enabled: false
              disable_login_form: true
              {{- if not (empty (index .Values "packages" "prometheus-stack" "grafana" "auth" "oidc" "providers" "microsoft")) }}
            auth.azuread:
              enabled: true
              name: {{ index .Values "packages" "prometheus-stack" "grafana" "auth" "oidc" "providers" "microsoft" "name" }}
              allow_sign_up: true
              allow_assign_grafana_admin: true
              auth_url: https://login.microsoftonline.com/{{ index .Values "packages" "prometheus-stack" "grafana" "auth" "oidc" "providers" "microsoft" "tenant" }}/oauth2/v2.0/authorize
              token_url: https://login.microsoftonline.com/{{ index .Values "packages" "prometheus-stack" "grafana" "auth" "oidc" "providers" "microsoft" "tenant" }}/oauth2/v2.0/token
              client_id: {{ index .Values "packages" "prometheus-stack" "grafana" "auth" "oidc" "providers" "microsoft" "clientId" }}
              client_secret: {{ index .Values "packages" "prometheus-stack" "grafana" "auth" "oidc" "providers" "microsoft" "clientSecret" }}
              scopes: email openid profile
              allowed_organizations: {{ index .Values "packages" "prometheus-stack" "grafana" "auth" "oidc" "providers" "microsoft" "tenant" }}
              {{- end }}
              {{- if not (empty (index .Values "packages" "prometheus-stack" "grafana" "auth" "oidc" "providers" "generic")) }}
            auth.oidc:
              enabled: true
              name: {{ index .Values "packages" "prometheus-stack" "grafana" "auth" "oidc" "providers" "generic" "name" }}
              auto_login: false
              allow_sign_up: true
              allow_assign_grafana_admin: true
              api_url: {{ index .Values "packages" "prometheus-stack" "grafana" "auth" "oidc" "providers" "generic" "apiUrl" }}
              auth_url: {{ index .Values "packages" "prometheus-stack" "grafana" "auth" "oidc" "providers" "generic" "authUrl" }}
              token_url: {{ index .Values "packages" "prometheus-stack" "grafana" "auth" "oidc" "providers" "generic" "tokenUrl" }}
              client_id: {{ index .Values "packages" "prometheus-stack" "grafana" "auth" "oidc" "providers" "generic" "clientId" }}
              client_secret: {{ index .Values "packages" "prometheus-stack" "grafana" "auth" "oidc" "providers" "generic" "clientSecret" }}
              scopes: {{ index .Values "packages" "prometheus-stack" "grafana" "auth" "oidc" "providers" "generic" "scopes" }}
              role_attribute_path: {{ index .Values "packages" "prometheus-stack" "grafana" "auth" "oidc" "providers" "generic" "roleAttributePath" }}
              role_attribute_strict: true
              {{- end }}
            {{- end }}
        {{- if index .Values "packages" "prometheus-stack" "alertmanager" "enabled" }}
        alertmanager:
          config:
            {{- if index .Values "packages" "prometheus-stack" "alertmanager" "smtp" "enabled" }}
            global:
              smtp_smarthost: {{ index .Values "packages" "prometheus-stack" "alertmanager" "smtp" "host" }}
              smtp_from: {{ index .Values "packages" "prometheus-stack" "alertmanager" "smtp" "email" }}
              smtp_auth_username: {{ index .Values "packages" "prometheus-stack" "alertmanager" "smtp" "email" }}
              smtp_auth_password: {{ index .Values "packages" "prometheus-stack" "alertmanager" "smtp" "password" }}
            {{- end }}
            {{- if index .Values "packages" "prometheus-stack" "alertmanager" "route" "enabled" }}
            route:
              {{- if index .Values "packages" "prometheus-stack" "alertmanager" "route" "defaultReceiver" }}
              receiver: {{ index .Values "packages" "prometheus-stack" "alertmanager" "route" "defaultReceiver" }}
              {{- end }}
              {{- if index .Values "packages" "prometheus-stack" "alertmanager" "route" "defaultGroupBy" }}
              group_by: {{ index .Values "packages" "prometheus-stack" "alertmanager" "route" "defaultGroupBy" }}
              {{- end }}
              {{- if index .Values "packages" "prometheus-stack" "alertmanager" "route" "defaultGroupWait" }}
              group_wait: {{ index .Values "packages" "prometheus-stack" "alertmanager" "route" "defaultGroupWait" }}
              {{- end }}
              {{- if index .Values "packages" "prometheus-stack" "alertmanager" "route" "defaultGroupInterval" }}
              group_interval: {{ index .Values "packages" "prometheus-stack" "alertmanager" "route" "defaultGroupInterval" }}
              {{- end }}
              {{- if index .Values "packages" "prometheus-stack" "alertmanager" "route" "defaultRepeatInterval" }}
              repeat_interval: {{ index .Values "packages" "prometheus-stack" "alertmanager" "route" "defaultRepeatInterval" }}
              {{- end }}
              {{- if index .Values "packages" "prometheus-stack" "alertmanager" "route" "childRoutes" 0 "receiver" }}
              routes:
                {{- range $receiversConfig := index .Values "packages" "prometheus-stack" "alertmanager" "route" "childRoutes" }}
                - receiver: {{ $receiversConfig.receiver }}
                  {{- if $receiversConfig.groupBy }}
                  group_by: {{ $receiversConfig.groupBy }}
                  {{- end }}
                  {{- if $receiversConfig.groupWait }}
                  group_wait: {{ $receiversConfig.groupWait }}
                  {{- end }}
                  {{- if $receiversConfig.groupInterval }}
                  group_interval: {{ $receiversConfig.groupInterval }}
                  {{- end }}
                  {{- if $receiversConfig.repeatInterval }}
                  repeat_interval: {{ $receiversConfig.repeatInterval }}
                  {{- end }}
                  {{- if $receiversConfig.continue }}
                  continue: {{ $receiversConfig.continue }}
                  {{- end }}
                  {{- if and $receiversConfig.matchers (index $receiversConfig.matchers 0)}}
                  matchers:
                  {{- range $matchersConfig := $receiversConfig.matchers }}
                    - {{ . }}
                  {{- end }}
                  {{- end }}
                  {{- if and $receiversConfig.muteIntervals (index $receiversConfig.muteIntervals 0)}}
                  mute_time_intervals:
                  {{- range $muteIntervalConfig := $receiversConfig.muteIntervals }}
                    - {{ . }}
                  {{- end }}
                  {{- end }}
                  {{- if and $receiversConfig.activeIntervals (index $receiversConfig.activeIntervals 0)}}
                  active_time_intervals:
                  {{- range $activeIntervalConfig := $receiversConfig.activeIntervals }}
                    - {{ . }}
                  {{- end }}
                  {{- end }}
                {{- end }}
              {{- end }}
            {{- end }}
            {{- if index .Values "packages" "prometheus-stack" "alertmanager" "timeIntervals" "enabled" }}
            time_intervals:
              {{- range $intervalConfig := index .Values "packages" "prometheus-stack" "alertmanager" "timeIntervals" "intervals" }}
              - name: {{ $intervalConfig.name }}
                time_intervals:
                  {{- range $timesConfig := $intervalConfig.configurations }}
                  - times:
                    {{- range $hoursConfig := $timesConfig.times }}
                    {{- if and $hoursConfig.startTime $hoursConfig.endTime }}
                    - start_time: {{ $hoursConfig.startTime }}
                      end_time: {{ $hoursConfig.endTime }}
                    {{- end }}
                    {{- end }}
                    {{- if $timesConfig.weekdays }}
                    weekdays: {{ $timesConfig.weekdays }}
                    {{- end }}
                    {{- if $timesConfig.daysOfMonths }}
                    days_of_month: {{ $timesConfig.daysOfMonths }}
                    {{- end }}
                    {{- if $timesConfig.months }}
                    months: {{ $timesConfig.months }}
                    {{- end }}
                    {{- if $timesConfig.years }}
                    years: {{ $timesConfig.years }}
                    {{- end }}
                    {{- if $timesConfig.location }}
                    location: {{ $timesConfig.location }}
                    {{- end }}
                  {{- end }}
              {{- end }}
            {{- end }}
            receivers:
              - name: 'null'
              {{- if index .Values "packages" "prometheus-stack" "alertmanager" "receivers" "teams" "enabled" }}
              {{- range $teamsConfig := index .Values "packages" "prometheus-stack" "alertmanager" "receivers" "teams" "configurations" }}
              {{- if $teamsConfig.name }}
              - name: {{ $teamsConfig.name }}
                msteams_configs:
                  {{- range $webhookConfig := $teamsConfig.webhook }}
                  - webhook_url: {{ $webhookConfig.url }}
                    send_resolved: {{ $webhookConfig.sendResolved }}
                  {{- end }}
              {{- end }}
              {{- end }}
              {{- end }}
              {{- if and (index .Values "packages" "prometheus-stack" "alertmanager" "smtp" "enabled") (index .Values "packages" "prometheus-stack" "alertmanager" "receivers" "mail" "enabled") }}
              {{- range $mailConfig := index .Values "packages" "prometheus-stack" "alertmanager" "receivers" "mail" "configurations" }}
              {{- if $mailConfig.name }}
              - name: {{ $mailConfig.name }}
                email_configs:
                {{- range $toConfig := $mailConfig.to }}
                  - to: {{ $toConfig.mailAddress }}
                    send_resolved: {{ $toConfig.sendResolved }}
                {{- end }}
              {{- end }}
              {{- end }}
              {{- end }}
        {{- end }}
        {{- if index .Values "packages" "prometheus-stack" "alertmanager" "additionalAlertRules" "enabled" }}
        additionalPrometheusRulesMap:
          rule-name:
            groups:
              {{- range $groupRules := index .Values "packages" "prometheus-stack" "alertmanager" "additionalAlertRules" "rules" }}
              - name: {{ $groupRules.groupName }}
                rules:
                  {{- range $rule := $groupRules.rules }}
                  - alert: {{ $rule.name }}
                    expr: {{ $rule.expression }}
                    for: {{ $rule.for }}
                    labels:
                      severity: {{ $rule.severity }}
                    {{- if or $rule.description $rule.summary }}
                    annotations:
                      {{- if $rule.description }}
                      description: {{ $rule.description }}
                      {{- end }}
                      {{- if $rule.summary }}
                      summary: {{ $rule.summary }}
                      {{- end }}
                    {{- end }}
                  {{- end }}
              {{- end }}
        {{- end }}
  destination:
    server: {{ .Values.kubernetes.server }}
    namespace: {{ .Release.Namespace }}
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - ServerSideApply=true
...
